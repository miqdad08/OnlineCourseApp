import 'dart:ui';
import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';

String _appTheme = "primary";

class ThemeHelper {
  // A map of custom color themes supported by the app
  final Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  final Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  void changeTheme(String newTheme) {
    _appTheme = newTheme;
  }

  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: appTheme.black900,
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: appTheme.deepPurpleA700,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(26),
          ),
          shadowColor: colorScheme.primary,
          elevation: 8,
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
    );
  }

  PrimaryColors themeColor() => _getThemeColors();

  ThemeData themeData() => _getThemeData();
}

class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
    bodyLarge: GoogleFonts.poppins(
      color: colorScheme.onPrimary,
      fontSize: 16,
      fontWeight: FontWeight.w400,
    ),
    bodyMedium: GoogleFonts.poppins(
      color: colorScheme.onPrimary,
      fontSize: 14,
      fontWeight: FontWeight.w400,
    ),
    headlineSmall: GoogleFonts.poppins(
      color: appTheme.black90001,
      fontSize: 24,
      fontWeight: FontWeight.w600,
    ),
    labelLarge: GoogleFonts.poppins(
      color: colorScheme.onPrimaryContainer.withOpacity(1),
      fontSize: 12,
      fontWeight: FontWeight.w700,
    ),
    titleLarge: GoogleFonts.poppins(
      color: colorScheme.onPrimaryContainer.withOpacity(1),
      fontSize: 20,
      fontWeight: FontWeight.w700,
    ),
    titleMedium: GoogleFonts.poppins(
      color: colorScheme.onPrimaryContainer.withOpacity(1),
      fontSize: 16,
      fontWeight: FontWeight.w600,
    ),
    titleSmall: GoogleFonts.poppins(
      color: colorScheme.onPrimaryContainer.withOpacity(1),
      fontSize: 14,
      fontWeight: FontWeight.w600,
    ),
  );
}

class ColorSchemes {
  static const primaryColorScheme = ColorScheme.light(
    // Primary colors
    primary: Color(0X4C0300A2),
    primaryContainer: Color(0XFF640EF1),
    secondaryContainer: Color(0XFF060718),

    // Error colors
    errorContainer: Color(0XFF15162F),
    onErrorContainer: Color(0XFF2AB55A),

    // On colors(text colors)
    onPrimary: Color(0XFF61647D),
    onPrimaryContainer: Color(0X66FFFFFF),
    onSecondaryContainer: Color(0XFFFF2929),
  );
}

class PrimaryColors {
  // Black
  Color get black900 => const Color(0XFF05051E);
  Color get black90001 => const Color(0XFF000000);

  // DeepOrange
  Color get deepOrange300 => const Color(0XFFFF9F69);

  // DeepPurple
  Color get deepPurpleA700 => const Color(0XFF640DF0);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
